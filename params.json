{
  "name": "Data Driven March Madness: The Search for the Perfect Bracket",
  "tagline": "Isabel Lee and Christina Tenuta",
  "body": "## Notebook Contents\r\n\r\n[0 Introduction](#0)\r\n\r\n[1 Data Exploration](#1)\r\n\r\n[2 Building the Model](#2)\r\n  \r\n  * [2.1 Methodology](#2.1)\r\n  \r\n[3 Final Model and Prediction](#3)\r\n\r\n  * [3.1 2016 Predictions](#3.1)\r\n\r\n[4 Limitations and Further Research](#4)\r\n\r\n[5 Conclusions](#5)\r\n\r\n[6 References] (#6)\r\n\r\n# 0 Introduction\r\n<a id = '0'></a>\r\n\r\n## Background and Motivation\r\nMarch Madness has become one of the most popular sporting events in the United States. It has been estimated that millions of Americans participate in bracket tournaments every year. ESPN, CBS Sports, and Fox Sports host tournaments every year. \r\n\r\nIn 2014, Warren Buffet offered a billion dollars to anyone who could predict a perfect bracket, and not a single person was able to. March Madness has become a lucrative way of gambling in the past years. In light of the seemingly impossible perfect bracket, we aim to use data science to create an algorithm that maximizes the typical scoring mechanism in bracket tournaments to optimize chances of winning in any given bracket tournament. \r\n\r\nBrackets are generally scored by giving more weight to the later games. For example, every game guessed correctly is worth 1 point in the first round, 2 points in the second, 4 points in the third and so on, so forth. Thus, the final round is worth 32 points, out of a total 192 possible points. Picking the last game correctly has huge influence, as the predictor not only predicted the correct winning teams of the final 4, but also the final game, for a total 64 points, or one third of the total points overall. Consequently, the scoring mechanism places much greater importance on the later games. We would like our bracket to optimize for this scoring mechanism.\r\n\r\nA major challenge participants in a bracket tournament tend to face is the unpredictability of the games. Not only are the chances of predicting a fully correct bracket worse than a billion to one against, but there are factors outside of simple offensive or defensive statistics that make the feat incredibly difficult. Variables such as momentum, confidence, distance from home school, and such are qualitative statistics that can have large impacts on the outcome of games.\r\n\r\nUsing data science, we propose the creation of a bracket using not only basketball statistics from the competing teams’ regular seasons, but also for factors less quantitative, such as momentum and confidence. \r\n\r\n## Initial Questions\r\nInitially, the goal of this project was to simply create an algorithm that would predict a March Madness bracket that produced the highest score given the tournament scoring mechanism. However, over the course of the project, more questions evolved as we began to think about how we would get to this bracket in the first place. \r\n  * Beyond quantitative variables, what qualitative variables drive a team’s wins?\r\n  * How can we use linear regression to determine one team winning over another?\r\n  * How do we make our model optimize for the scoring mechanism and not the accuracy?\r\n  * How should our train and testing data sets operate within the model?\r\n\r\n## Overview of Our Process\r\nFirst, we began scraping data found from the Kaggle competition. We then completed a series of data analyses to explore how different variables related to one another and get a sense of what data might be important and what might not be. The result of such analysis was the realization that March Madness outcomes are extremely difficult to predict, and the ability to predict upsets and make a bracket different from the standard are important. A lot of our data processing is found in the functions below. A lot of the data scraping and exploration we did basically connects team IDs to the features as well as creating a bracket output that we could then compare to the actual results in order to score the models.\r\n\r\nThe information collected allowed us to form our process, which includes an extensive amount of data processing. Essentially, we created feature vectors, which included offensive, defensive, and some more nuanced statistics, for each team in order to asses the quality of each team and utilized a logistic regression that calculated the probability of one team beating another given the feature vectors of the two teams. Because creating a March Madness bracket involves more than just the ability to predict games correctly, we looked at all the probabilities and moved teams on in the tournament if they had a high chance of winning their game. For games where the probability of winning or losing was extremely close to .5, we tuned a range for which the most upsets occur. In terms of accuracy, we scored our model in comparison to a baseline model that simply passed the team with the lowest seed (the perceived best team) on in the tournament. \r\n\r\n# 1 Data Exploration\r\n<a id = '1'></a>\r\n\r\n## Field Goals\r\n![Field Goals]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/field_goals.png?raw=true)\r\n\r\n## Three Pointers\r\n![Three Pointers]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/three_pointers.png?raw=true)\r\n\r\n## Free Throws\r\n![Free Throws]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/free_throws.png?raw=true)\r\n\r\nWe tried creating some visualizations that would help us decide what game actions were most important in leading a team to win. For example, are three pointers or free throws better indicators of a winning team and is it more important for a team to be more accurate or to make more attempts? We plotted shots made vs shots attempted for field goals, three pointers, and free throws and found that winning and losing teams have about the same percentage of free throw accuracy, but winning teams perform with an overall higher accuracy during the tournament.\r\n\r\n## Tournament vs. Regular Season Wins\r\n![Free Throws]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/wins.png?raw=true)\r\nWe then explored the relationship between the number of regular season winning games and the number of tourney game wins a team has. There appears to be some sort of relationship where winning a larger number of regular season is correlated with success in the tournament. While this relationship might seem obvious, the graph shows that there are a number of outliers and that winning a comparatively small number of season games does not necessarily mean that a team will win no games in the tournament. We are interested to look into these outliers and see what other factors lead to their success such as what league they may come from or what their aggressiveness level is.\r\n\r\n## Aggression\r\n![Aggression]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/aggression.png?raw=true)\r\nLastly, we explored the relationship between points scored, three pointers to field goals ratio, and free throws to field goals ratio. In other words, we were looking at how the aggressiveness of each team affects the number of points scored in tournament games. Looking at the correlation matrix for these 3 factors, we see that on winning teams, free throws to field goals ratio correlation to points scored is weaker than it is on losing team. On winning teams, three pointers to free throws ratio to points is more negatively correlated than on losing teams. \r\n\r\n# 2 Building the Model\r\n<a id = '2'></a>\r\n\r\nIn order to build the model, we first built the functions that we would need in order to complete all of the steps of our process. The steps are as follows:\r\n  1. Assign feature vectors for each team in the tournament using regular season statistics\r\n  2. Tune PCA components to account for correlation of offensive and defensive statistics\r\n  3. Append momentum, elo score, and consistency to the vectors\r\n  4. Train the model with 3 years of tournament data using logistic regression (tuning C) to determine probabilities of one     team winnings over another\r\n  5. Predict probabilities of all possible games in the test year tournament using the model\r\n  6. Build a bracket predicting the model, tuning for the range in which upsets will occur\r\n  7. Score the bracket based on the weighted scoring mechanism, weighting variability from the seed model\r\n\r\n\r\n## 2.1 Methodology\r\n<a id = '2.1'></a>\r\n\r\nIn this segment, we will explain the methodology behind our model, which is extremely important in building a model. First, I will address our strategy for winning a bracket tournament. This strategy is based on the idea that thousands of people compete in March Madness brackets every year. In order to win these winner-take-all style tournaments, it is important that a bracket not only score the highest, but is also the most different. Thus, our choice to tune the upset range of our model and then choose the underdog to win in this range is driven by the fact that we would like our model to be most different from the other brackets. Likewise, we include a function to account for the variance of our model from the seed model in the weighted score. In other words, brackets that are more different from the seed model earn more points because they are different. \r\n\r\nSecondly, I will address our choice to tune the model based on weighted score rather than accuracy of predicted games. Again, the weighted score system of March Madness brackets increases the points earned for games guessed correctly geometrically. Thus, guessing the later games correctly is much more important than say, the round of 64. Consequently, we chose to tune our model to score well rather than simply predict games well. \r\n\r\nLastly, our choice to train the model using 3 years before the test year is driven by two suppositions. The first is that the game changes over the years. Teams might score more points, foul less, etc. over the course of history. To account for these changing aspects of the game, we used 3 years before the test year to train our model. Secondly, we use 3 years before the test year to avoid leaking data to our model from the test year set. If we were to randomly choose test and train sets, our data could leak information to the model, making it seemingly more accurate while really taking away from the model's accuracy on future test sets. \r\n\r\nUltimately, our goal was to create a high-scoring model based on the bracket scoring system.\r\n\r\n\r\n### An example of some of the tuning we did: The upset range\r\nHere we tune for the range of upsets. It makes sense that if this range is too large (i.e. there if a large difference in probabilities of winning between the two teams) our model will be inaccurate because it will predict winning teams to lose. Thus, we want to optimize this range. We found that a range from .46 to .54 is the most likely to have upsets. Thus, when the team predicted to win has a .54 or less chance at winning, our model predicts them to lose. Again, we want to make our model the most different from that of the seed model and this is why we predict the higher seed team to win.\r\n\r\n![Probability Range]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/probability_range.png?raw=true)\r\n\r\n# 3 Our Final Model and Prediction\r\n<a id = '3'></a>\r\n\r\n## Results\r\n![Final Model]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/seed_logistic.png?raw=true)\r\n\r\nAbove are the results from our fully tuned model. When we compare our model to the baseline, seed only model, we see that the number of games predicted correctly is about the same as the seed model. However, it is important to note that our model is much better at predicting later games. We can see that in 6 out of the 10 test years, we beat the seeded model by points scored. Though the model does not guarantee a win every year, the fact that it accounts for deviation from the seed model results in a model that will give the user a higher possibility of winning in their bracket tournament. \r\n\r\nBecause building a March Madness bracket is more than simply guessing games correctly, we feel as though we have built a model that will allow users to potentially win their brackets and differentiate from the seed model, which is most important. The ability to score well is extremely important in these competition, and we can see that our model is very good at predicting later games in the tournament. Our model is built to score points, not games. \r\n\r\n![Final Model]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/model_scoring.png?raw=true)\r\n\r\nAbove we can see our model's scores alone. Note that we included a function to give our model additional points if it varied more from the seed model because we value brackets with individuality. \r\n\r\n## 3.1 Example Bracket: 2016 \r\n<a id = '3.1'></a>\r\n\r\nIn the competition from which we received the data, the goal was to ultimately predict a bracket for 2016. Here, we have included what would have been our predictions for 2016 if entering this tournament against the baseline model. \r\n\r\n### Baseline Model: Seed Based\r\n![Seed Model]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/seed_bracket_2016.png?raw=true)\r\n\r\n### Our Model\r\n![Predictions]\r\n(https://github.com/MarchMadnessCS109/project/blob/master/images/predicted_bracket_2016.png?raw=true)\r\n\r\n# 4 Limitations and Further Research\r\n<a id = '4'></a>\r\n\r\nCurrently, in order to optimize for variability from the seed model, if the probability of one team winning over another is between .46 and .54, the model chooses the underdog of the game to win. In order to maximize the weighted score of the bracket, a greedy function might be implemented where the model looks at all possible bracket outcomes and trains the model based on the bracket with the most possible points.\r\n\r\nAnother limitation of the model is that it doesn't account for anything happening in the tournament itself. For instance, if a high seed team upsets an expected winner, that could give the underdog a higher chance of winning their next game, impacting the model. One way to change the model to make it more accurate might be to give teams statistics for what happens when the tournament starts. \r\n\r\n# 5 Conclusions\r\n<a id = '5'></a>\r\n\r\nOverall, we can see that our model does give a high scoring bracket for some years. In a March Madness bracket tournament, it is important to remember that optimizing for the scoring model is more important than optimizing for the accuracy of games. In other words, the ability to predict later games is more important. Given the near impossibility of predicting a perfect bracket, we feel as though our model does optimize for the weighted scoring bracket of the tournament. While it may not produce a win every year, it does give the user a good chance of winning their overall bracket in some years by optimizing for the scoring model. \r\n\r\n# 6 References\r\n<a id = '6'></a>\r\n\r\nEzekowitz, J. (2011, May 18). Quantifying Intangibles: A New Way to Predict the NCAA Tournament. Retrieved December 09, 2016, from https://harvardsportsanalysis.wordpress.com/2011/05/18/quantifying-intangibles-a-network-analysis-prediction-model-for-the-ncaa-tournament/\r\n\r\nWhat the hell is Elo, anyway? (2012, October 21). Retrieved December 09, 2016, from http://sportselo.blogspot.com/2012/10/wht-hell-is-elo-anyway.html\r\n\r\nMarch Machine Learning Mania 2016 (2016, February 11). Retrieved December 14, 2016, from https://www.kaggle.com/c/march-machine-learning-mania-2016/data",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}